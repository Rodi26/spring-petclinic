# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ '21' ]
    steps:
      - name: checkout Git repository
        uses: actions/checkout@v4
      - name: Set up JDK ${{matrix.java}}
        uses: actions/setup-java@v4
        with:
          java-version: ${{matrix.java}}
          distribution: 'adopt'
          cache: maven
      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ secrets.JF_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}
      - name : Config JFrog CLI
        run : |
          jf mvnc --repo-resolve-releases w2-week2-maven-dev-virtual  --repo-resolve-snapshots  w2-week2-maven-dev-virtual --repo-deploy-releases w2-week2-maven-dev-virtual --repo-deploy-snapshots w2-week2-maven-dev-virtual 
      - name: Build Maven 
        run: jf mvn -B deploy



  scan-repository:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        # The repository scanning will be triggered periodically on the following branches.
        branch: ["main"]
    steps:
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin' # See 'Supported distributions' for available options
          java-version: '21'
      - uses: jfrog/frogbot@v2.9.2
        env:
          # [Mandatory]
          # JFrog platform URL
          JF_URL: ${{ secrets.JF_URL }}

          # [Mandatory if JF_USER and JF_PASSWORD are not provided]
          # JFrog access token with 'read' permissions on Xray service
          JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}

          # [Mandatory if JF_ACCESS_TOKEN is not provided]
          # JFrog username with 'read' permissions for Xray. Must be provided with JF_PASSWORD
          # JF_USER: ${{ secrets.JF_USER }}

          # [Mandatory if JF_ACCESS_TOKEN is not provided]
          # JFrog password. Must be provided with JF_USER
          # JF_PASSWORD: ${{ secrets.JF_PASSWORD }}

          # [Mandatory]
          # The GitHub token is automatically generated for the job
          JF_GIT_TOKEN: ${{ secrets.GITHUB_TOKEN }}

          # [Mandatory]
          # The name of the branch on which Frogbot will perform the scan
          JF_GIT_BASE_BRANCH: ${{ matrix.branch }}

        # [Mandatory if using OIDC authentication protocol instead of JF_ACCESS_TOKEN]
        # Insert to oidc-provider-name the 'Provider Name' defined in the OIDC integration configured in the JPD
        # with:
        #   oidc-provider-name: ""
        #JF_PATH_EXCLUSIONS: "*gradle*"



  test-action:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        java: [ '21' ]
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK ${{matrix.java}}
        uses: actions/setup-java@v4
        with:
          java-version: ${{matrix.java}}
          distribution: 'adopt'
          cache: maven
      - name: Login to Jfrog Artifactory
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.JF_REPO }}
          username: ${{ secrets.JF_USER }}
          password: ${{ secrets.JF_ACCESS_TOKEN }}
     
      - name: Set Up Docker
        uses: docker-practice/actions-setup-docker@master
      - name: Docker Run
        run: docker run -d -p 8080:8080 rodolphefplus.jfrog.io/w2-week2-oci-dev-local/spring-petclinic:latest      

      - name: Run JMeter Action on a test
        uses: rbhadti94/apache-jmeter-action@v0.5.0
        with:
          testFilePath: src/test/jmeter/petclinic_test_plan.jmx
          outputReportsFolder: reports/
          args: "--loglevel INFO" 
    
  build-and-tag:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ secrets.JF_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}


      - name: Build Tag and push Docker Image
        env:
          IMAGE_NAME: rodolphefplus.jfrog.io/w2-week2-oci-dev-local/spring-petclinic:latest
        run: |
          # jf docker build -t $IMAGE_NAME .
          docker build -t $IMAGE_NAME .
          jf docker push $IMAGE_NAME
          
      - name: Publish Build info With JFrog CLI
        env:
          # Generated and maintained by GitHub
          JFROG_CLI_BUILD_NAME: jfrog-spring-petclinic
          # JFrog organization secret
          JFROG_CLI_BUILD_NUMBER : ${{ github.run_number }}
        run: |
          # Export the build name and build nuber
          # Collect environment variables for the build
          jf rt build-collect-env
          # Collect VCS details from git and add them to the build
          jf rt build-add-git
          # Publish build info
          jf rt build-publish

      - name: Scan Build
        run: | 
          jf bs